#3324 Find the Sequence of Strings Appeared on the Screen
class Solution:
    def stringSequence(self, target: str) -> List[str]:
        s=""
        a=[]
        for i in range(len(target)):
            c=target[i]
            temp = "a"
            s+=temp
            a.append(s)
            while temp != target[i]:
                s=s[:-1]
                temp = chr(ord(temp) + 1)
                s+=temp
                a.append(s)
        return a

#3325 Count Substrings With K-Frequency Characters I
class Solution:
    def numberOfSubstrings(self, s: str, k: int) -> int:
        o={}
        ret=0
        boo=False
        for i in range(len(s)):
            o.clear()
            boo=False
            for j in range(i,len(s)):
                #print(o,s[i:j+1], ret)
                if boo:
                    ret += 1
                    continue
                elif s[j] not in o:
                    o[s[j]] = 1
                    if k == 1:
                        boo = True
                        ret += 1
                else:
                    o[s[j]] += 1
                    if o[s[j]] == k:
                        boo = True
                        ret+=1
        return ret

#3326 Minimum Division Operations to Make Array Non Decreasing
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        import math
        ops = 0
        for i in range(len(nums)-1,0,-1):
            boo=False
            if nums[i] < nums[i-1]:
                for j in range(2,int(nums[i-1]**0.5) + 1):
                    if nums[i-1] % j == 0:
                        nums[i-1] = j
                        if nums[i] < nums[i-1]:
                            return -1
                        ops+=1
                        boo=True
                        break
                if not boo:
                    return -1
        return ops
                    
